	/*
	 *  Do Not Edit This File - changes will be lost - see opcodes.c.template
	 */

#include <unistd.h>

#include "opcodes.h"
#include "symbol.h"

#perl Print_Table("Opcodes", "0x%02x", "instruction opcodes");

#perl Print_Table("Opcode_Help", q/(sym_val_t) "%s"/, "instruction help");

#perl Print_Table("ArgCounts", "%d", "instruction arg counts");

#define   count(array)    (sizeof(array) / sizeof(array[0]))
char *instructions[count(Opcodes)];

void init_opcodes() {
	int idx;
	
	opcodes = init_table(Opcodes);	
	argcounts = init_table(ArgCounts);
	
	for (idx = 0; idx < count(instructions); idx++) {
		int opcode = symbol_value(opcodes, Opcodes[0].name);
		instructions[opcode] = Opcodes[idx].name;
	}
}

static symbol_table __help = NULL;
symbol_table opcode_help() {
	if (__help == NULL)	
		__help = init_table(Opcode_Help);
	
	return __help;
}
