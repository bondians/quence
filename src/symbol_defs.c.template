	/*
	 *  Do Not Edit This File - see symbol_defs.c.template
	 */

#include <unistd.h>

#include "symbol.h"
#include "symbol_defs.h"
#include "instruction.h"

#perl Print_Table("Array_Ids", "0x%02x", "arrays");

symbol_init Array_Sizes[] = {
		{"intensity",	0x08},
		{"transctrl",	0x08},
		{"magctrl",		0x08},
		{"magcount",	0x08},
		{"magprecnt",	0x08},
		{"magclkdiv",	0x08},
		{"magstep",		0x08},
		{"magbound1",	0x08},
		{"magbound2",	0x08},
		{"gain",		0x04},
		{"analogin",	0x04},
		{"usrtmrcnt",	0x08},
		{"usrtmrlim",	0x08},
		{"displaybuf",	0x04},
		{"fixtmrcnt",	0x08},
		{"buffer1",		0x10},
		{"buffer2",		0x08},
		{"buffer3",		0x08},
		{"register",	0x10},
		{NULL,			0xff}
	};

#perl Print_Table("Control_Vars", "0x%02x", "control vars");

#define vector(addr)	((sym_val_t) &addr)
symbol_init Keywords[] = {
		{"data",		vector(db_meta_instruction)},
		{"db",			vector(db_meta_instruction)},
		{"dw",			vector(dw_meta_instruction)},
		{NULL,			0xff}
	};

#define 	count(array)	(sizeof(array) / sizeof(array[0]))
unsigned array_sizes[count(Array_Sizes)] = {0};
char *array_names[count(Array_Ids)] = {NULL};
const int n_arrays = count(Array_Ids) - 1;

char * control_var_names[count(Control_Vars)] = {NULL};
const int n_control_vars = count(Control_Vars) - 1;

void init_symbols() {
	int idx;

	array_ids = init_table(Array_Ids);
	control_vars = init_table(Control_Vars);
	keywords = init_table(Keywords);

	for (idx = 0; idx < count(array_sizes) - 1; idx++) {
		int array = symbol_value(array_ids, Array_Sizes[idx].name);
		array_sizes[array] = Array_Sizes[idx].value;
		array_names[array] = Array_Ids[idx].name;
	}

	for (idx = 0; idx < count(Control_Vars) - 1; idx++) {
		int var = symbol_value(control_vars, Control_Vars[idx].name);
		control_var_names[var] = Control_Vars[idx].name;
	}
}
